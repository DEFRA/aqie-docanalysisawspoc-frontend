{% extends 'layouts/page.njk' %}

{% block pageTitle %}Analysis Status{% endblock %}

{% block content %}
<a href="/upload" class="govuk-back-link">Back to Upload</a>

<h1 class="govuk-heading-m">Document Analysis Status</h1>

{% if markdownContent %}
<div id="markdownContent" class="govuk-body markdown-content" style="margin-top: 2em;">
  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em;">
    <h2 class="govuk-heading-m" style="margin: 0;">Analysis Results</h2>
    <button id="exportPdfBtn" class="govuk-button" style="background-color: #00703c; border-color: #00703c;" onclick="exportToPdf()">Export to PDF</button>
  </div>
  <div id="markdownRenderer">
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const markdownContent = `{{ markdownContent | safe }}`;
        document.getElementById('markdownRenderer').innerHTML = marked.parse(markdownContent);
        
        // Apply GOV.UK styling to tables
        document.querySelectorAll('#markdownRenderer table').forEach((table) => {
          table.classList.add('govuk-table');
          table.querySelectorAll('thead').forEach((thead) => {
            thead.classList.add('govuk-table__head');
          });
          table.querySelectorAll('tbody').forEach((tbody) => {
            tbody.classList.add('govuk-table__body');
          });
          table.querySelectorAll('th').forEach((th) => {
            th.classList.add('govuk-table__header');
          });
          table.querySelectorAll('td').forEach((td) => {
            td.classList.add('govuk-table__cell');
          });
        });
      });
    </script>
  </div>
</div>
{% else %}
<div class="govuk-inset-text">
  <div class="spinner" style="display: inline-block; margin-right: 10px;"></div>
  {{ markdownContent or 'Processing your document analysis... Please wait while we fetch the results from our AI service.' }}
</div>
{% endif %}

<div id="errorMessage" class="govuk-error-summary" style="display: none;">
  <div class="govuk-error-summary__body">
    <p id="errorText"></p>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const requestId = '{{ requestId }}';
  const status = '{{ status }}';

  if (status === 'polling') {
    const startTime = Date.now();
    const maxDuration = 3 * 60 * 1000; // 3 minutes
    
    function pollProgress() {
      if (Date.now() - startTime > maxDuration) {
        document.querySelector('.govuk-inset-text').innerHTML = 
          '<p class="govuk-error-message">⚠️ Processing timeout: Analysis is taking longer than expected. Please try uploading your document again.</p>';
        return;
      }

      fetch(`/progress/${requestId}`)
        .then(response => {
          console.log('Response status:', response.status);
          return response.json();
        })
        .then(data => {         
          if (data.status === 'completed') {
            location.reload();
          } else {
            setTimeout(pollProgress, 5000);
          }
        })
        .catch(error => {
          console.error('Polling error:', error);
          setTimeout(pollProgress, 5000);
        });
    }
    
    pollProgress();
  } else if (status === 'completed') {
    console.log('Analysis already completed');
  }
});

function exportToPdf() {
  const element = document.getElementById('markdownRenderer');
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
  
  html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true
  }).then(canvas => {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();
    const imgData = canvas.toDataURL('image/png');
    
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    
    let position = 0;
    
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;
    
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }
    
    pdf.save(`analysis-results-${timestamp}.pdf`);
  });
}
</script>

{% endblock %}