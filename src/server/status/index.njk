{% extends 'layouts/page.njk' %}

{% block pageTitle %}Analysis Status{% endblock %}

{% block content %}
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="/public/libs/xlsx.js"></script>
<script src="/public/libs/docx.js"></script>
<script src="/public/libs/filesaver.js"></script>
<a href="/Uploader" class="govuk-back-link no-print">Back to Upload</a>

<h1 class="govuk-heading-m no-print">Document Analysis Status</h1>

{% if markdownContent %}
<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em;">
  <h2 class="govuk-heading-m" style="margin: 0;">Analysis Results</h2>
  {% if status == 'completed' %}
  <div style="display: flex; gap: 10px;">
    <button id="exportPdfBtn" class="govuk-button no-print" style="background-color: #00703c; border-color: #00703c;" onclick="exportToPdf()">Export to PDF</button>
    <button id="exportExcelBtn" class="govuk-button no-print" style="background-color: #1d70b8; border-color: #1d70b8;" onclick="exportToExcel()">Export to Excel</button>
    <button id="exportWordBtn" class="govuk-button no-print" style="background-color: #d4351c; border-color: #d4351c;" onclick="exportToWord()">Export to Word</button>
  </div>
  {% endif %}
</div>
<div id="markdownContent" class="govuk-body markdown-content" style="margin-top: 1em; border: none;">
  <div id="markdownRenderer">
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const markdownContent = {{ markdownContent | safe }};
        document.getElementById('markdownRenderer').innerHTML = marked.parse(markdownContent);
        
        // Apply GOV.UK styling to tables
        document.querySelectorAll('#markdownRenderer table').forEach((table) => {
          table.classList.add('govuk-table');
          table.querySelectorAll('thead').forEach((thead) => {
            thead.classList.add('govuk-table__head');
          });
          table.querySelectorAll('tbody').forEach((tbody) => {
            tbody.classList.add('govuk-table__body');
          });
          table.querySelectorAll('th').forEach((th) => {
            th.classList.add('govuk-table__header');
          });
          table.querySelectorAll('td').forEach((td) => {
            td.classList.add('govuk-table__cell');
          });
        });
      });
    </script>
  </div>
</div>
{% else %}
<div class="govuk-inset-text">
  <div class="spinner" style="display: inline-block; margin-right: 10px;"></div>
  {{ markdownContent or 'Processing your document analysis... Please wait while we fetch the results from our AI service.' }}
</div>
{% endif %}

<div id="errorMessage" class="govuk-error-summary" style="display: none;">
  <div class="govuk-error-summary__body">
    <p id="errorText"></p>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const requestId = '{{ requestId }}';
  const status = '{{ status }}';

  if (status === 'polling') {
    const startTime = Date.now();
    const maxDuration = 3 * 60 * 1000; // 3 minutes
    
    function pollProgress() {
      if (Date.now() - startTime > maxDuration) {
        document.querySelector('.govuk-inset-text').innerHTML = 
          '<p class="govuk-error-message">⚠️ Processing timeout: Analysis is taking longer than expected. Please try uploading your document again.</p>';
        return;
      }

      fetch(`/progress/${requestId}`)
        .then(response => {
          console.log('Response status:', response.status);
          return response.json();
        })
        .then(data => {         
          if (data.status === 'completed') {
            location.reload();
          } else {
            setTimeout(pollProgress, 5000);
          }
        })
        .catch(error => {
          console.error('Polling error:', error);
          setTimeout(pollProgress, 5000);
        });
    }
    
    pollProgress();
  } else if (status === 'completed') {
    console.log('Analysis already completed');
  }
});

function exportToPdf() {
  const style = document.createElement('style');
  style.innerHTML = `
    @media print {
      .no-print { display: none !important; }
      body * { visibility: hidden; }
      .print-header, .print-header * { visibility: visible; }
      #markdownRenderer, #markdownRenderer * { visibility: visible; }
      .print-header { position: absolute; left: 0; top: 0; width: 100%; }
      #markdownRenderer { position: absolute; left: 0; top: 80px; width: 100%; }
      .print-header .govuk-header__service-name { display: none !important; }
    }
  `;
  document.head.appendChild(style);
  
  window.print();
  
  setTimeout(() => {
    document.head.removeChild(style);
  }, 1000);
}



function exportToExcel() {
  const wb = XLSX.utils.book_new();
  const content = document.getElementById('markdownRenderer');
  
  const tables = content.querySelectorAll('table');
  
  if (tables.length > 0) {
    tables.forEach((table, index) => {
      const ws = XLSX.utils.table_to_sheet(table);
      const sheetName = `Table_${index + 1}`;
      XLSX.utils.book_append_sheet(wb, ws, sheetName);
    });
  } else {
    const textContent = content.innerText;
    const ws = XLSX.utils.aoa_to_sheet([['Analysis Results'], [textContent]]);
    XLSX.utils.book_append_sheet(wb, ws, 'Analysis');
  }
  
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `document-analysis-${timestamp}.xlsx`;
  
  XLSX.writeFile(wb, filename);
}

function exportToWord() {
  const content = document.getElementById('markdownRenderer');
  const textContent = content.innerText;
  
  const doc = new docx.Document({
    sections: [{
      properties: {},
      children: [
        new docx.Paragraph({
          children: [
            new docx.TextRun({
              text: "Document Analysis Results",
              bold: true,
              size: 32
            })
          ],
          spacing: { after: 400 }
        }),
        new docx.Paragraph({
          children: [
            new docx.TextRun({
              text: textContent,
              size: 24
            })
          ]
        })
      ]
    }]
  });
  
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `document-analysis-${timestamp}.docx`;
  
  docx.Packer.toBlob(doc).then(blob => {
    saveAs(blob, filename);
  });
}
</script>

{% endblock %}