{% extends 'layouts/page.njk' %}
{% from "govuk/components/button/macro.njk" import govukButton %}

{% block pageTitle %}Upload Policy Document{% endblock %}

{% block bodyAttributes %}{% if processingId %} data-processing-id="{{ processingId }}"{% endif %}{% endblock %}

{% block content %}
<h1 class="govuk-heading-m">Upload a Document to Generate AI-Powered Insights</h1>
<form id="uploadForm" action="{{ action }}" method="post" enctype="multipart/form-data" onsubmit="document.getElementById('submitButton').disabled = true; document.getElementById('loadingMessage').style.display = 'block';">
  <div class="govuk-form-group">
    <label class="govuk-label" for="analysisType">
      Prompt analysis type
    </label>
    <select class="govuk-select" id="analysisType" name="analysisType" required style="padding: 8px 12px; border: 2px solid #0b0c0c; border-radius: 4px; font-size: 16px; background: white; min-width: 200px;" oninvalid="this.setCustomValidity('Please select an analysis type')" oninput="this.setCustomValidity('')">
      <option value="">Select analysis type</option>
      <option value="red" {% if analysisType == 'red' %}selected{% endif %}>ðŸ”´ Red team</option>
      <option value="green" {% if analysisType == 'green' %}selected{% endif %}>ðŸ“— Green book</option>
      <option value="investment" {% if analysisType == 'investment' %}selected{% endif %}>ðŸ“Š Investment committee briefing</option>
      <option value="executive" {% if analysisType == 'executive' %}selected{% endif %}>ðŸ’¼ Executive briefing</option>
      <option value="comparingTwoDocuments" {% if analysisType == 'comparingTwoDocuments' %}selected{% endif %}>ðŸ“„ Compare two documents</option>
    </select>
  </div>
  <div class="govuk-form-group">
    <label class="govuk-label" for="policyPdf">Select PDF file</label>
    <div class="file-selection-area">
      <input class="govuk-file-upload" id="policyPdf" name="policyPdf" type="file" accept="application/pdf" required>
      <div id="fileSpinner" class="spinner" style="display: none;"></div>
    </div>
  </div>
  {{ govukButton({ text: "Summarise", attributes: { type: "submit", id: "submitButton" } }) }}
  {{ govukButton({ text: "Compare", classes: "govuk-button--secondary", attributes: { type: "button", id: "compareButton", disabled: true } }) }}
  <div id="loadingMessage" class="govuk-inset-text" style="display: none;">
    <div class="spinner" style="display: inline-block; margin-right: 10px;"></div>
    Processing PDF... Please wait...
  </div>
</form>
<div id="fileInfo" style="margin-top:1em; display:none;">
  <strong>Selected file:</strong> <span id="fileName"></span>
</div>

<!-- Upload History Table -->
{% if uploads and uploads.length > 0 %}
<div class="govuk-form-group" style="margin-top: 2em;">
  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em;">
    <h2 class="govuk-heading-m" style="margin: 0;">Upload History</h2>
    <div>
      <label for="pageSize" class="govuk-label" style="margin-right: 0.5em;">Show:</label>
      <select id="pageSize" class="govuk-select" style="width: auto;">
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
    </div>
  </div>
  <table class="govuk-table" id="uploadHistoryTable">
    <thead class="govuk-table__head">
      <tr class="govuk-table__row">
        <th class="govuk-table__header">Filename</th>
        <th class="govuk-table__header">Analysis type</th>
        <th class="govuk-table__header">Status</th>
        <th class="govuk-table__header">Timestamp</th>
        <th class="govuk-table__header">Action</th>

      </tr>
    </thead>
    <tbody class="govuk-table__body" id="uploadHistoryBody">
      {% for upload in uploads %}
      <tr class="govuk-table__row selectable-row" data-s3-bucket="{{ upload.s3Bucket }}" data-s3-key="{{ upload.s3Key }}" data-upload-id="{{ upload.id }}">
        <td class="govuk-table__cell">{{ upload.filename }}</td>
        <td class="govuk-table__cell">{{ upload.analysisType }}</td>
        <td class="govuk-table__cell">
          <span class="status-badge status-{{ upload.status }}">{{ upload.status }}</span>
        </td>
        <td class="govuk-table__cell">
          <script>document.write(new Date('{{ upload.timestamp }}').toLocaleString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'}).replace(',', ''));</script>
        </td>
        <td class="govuk-table__cell">
          {% if upload.status == 'completed' %}
          <a href="/status/{{ upload.requestId }}" class="govuk-link">View Results</a>
          {% else %}
          <span class="govuk-hint">Processing...</span>
          {% endif %}
        </td>

      </tr>
      {% endfor %}
    </tbody>
  </table>
  
  <div id="pagination" class="govuk-pagination" style="margin-top: 1em;">
    <div class="govuk-pagination__prev">
      <button id="prevBtn" class="govuk-link govuk-pagination__link" disabled><<</button>
    </div>
    <ul class="govuk-pagination__list" id="pageNumbers"></ul>
    <div class="govuk-pagination__next">
      <button id="nextBtn" class="govuk-link govuk-pagination__link">>></button>
    </div>
  </div>
</div>

<style>
.govuk-table__cell {
  font-size: 14px;
  vertical-align: middle;
  padding: 8px 12px;
}
.status-badge {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: bold;
  display: inline-block;
}
.status-analysing { background: #ff9800; color: white; animation: pulse 2s infinite;}
.status-processing { background: #2196f3; color: white; animation: pulse 2s infinite; }
.status-completed { background: #00703c; color: white; }
.status-failed { background: #f44336; color: white; }
.status-uploading { background: #9c27b0; color: white; animation: pulse 1.5s infinite; }
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}
.govuk-table__header {
  font-size: 14px;
  font-weight: 600;
}
.govuk-hint {
  font-size: 14px;
  color: #626a6e;
}
.govuk-radios__input {
  width: 16px;
  height: 16px;
  margin: 0;
  cursor: pointer;
}
.selectable-row {
  cursor: pointer;
  transition: background-color 0.2s;
}
.selectable-row:hover {
  background-color: #f3f2f1;
}
.selectable-row.selected {
  background-color: #1d70b8;
  color: white;
}
.selectable-row.selected .status-badge {
  border: 1px solid white;
}
.selectable-row.selected a {
  color: white;
  text-decoration: underline;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let allUploads = [];
  let currentPage = 1;
  let pageSize = 10;
  
  // Check if redirected from complete action and show success message
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('uploaded') === 'true') {
    // Remove the parameter from URL without page reload
    window.history.replaceState({}, document.title, window.location.pathname);
    
    // Clear localStorage after successful upload
    localStorage.removeItem('selectedRowData');
    localStorage.removeItem('concatenatedFilename');
    
    // Show success message
    const successDiv = document.createElement('div');
    successDiv.className = 'govuk-notification-banner govuk-notification-banner--success';
    successDiv.innerHTML = `
      <div class="govuk-notification-banner__header">
        <h2 class="govuk-notification-banner__title">Success</h2>
      </div>
      <div class="govuk-notification-banner__content">
        <p class="govuk-notification-banner__heading">File uploaded successfully. Analysis in progress.</p>
      </div>
    `;
    document.querySelector('h1').after(successDiv);
    
    // Immediately update upload history to show new upload
    updateUploadHistory();
    
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      successDiv.remove();
    }, 5000);
  }
  
  const pageSizeSelect = document.getElementById('pageSize');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  
  // Add event listener for analysis type dropdown
  document.getElementById('analysisType').addEventListener('change', updateCompareButtonState);

  pageSizeSelect.addEventListener('change', function() {
    pageSize = parseInt(this.value);
    currentPage = 1;
    renderTable();
  });
  
  prevBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      currentPage--;
      renderTable();
    }
  });
  
  nextBtn.addEventListener('click', function() {
    const totalPages = Math.ceil(allUploads.length / pageSize);
    if (currentPage < totalPages) {
      currentPage++;
      renderTable();
    }
  });

  let selectedRow = null;
  
  // Function to update Compare button state
  function updateCompareButtonState() {
    const compareButton = document.getElementById('compareButton');
    const analysisType = document.getElementById('analysisType').value;
    const selectedDataStr = localStorage.getItem('selectedRowData');
    const hasSelectedData = selectedDataStr !== null;
    const isCompareAnalysis = analysisType === 'comparingTwoDocuments';
    
    // Check if selected row has completed status
    let hasCompletedStatus = false;
    if (hasSelectedData && selectedRow) {
      hasCompletedStatus = selectedRow.querySelector('.status-badge').textContent === 'completed';
    }
    
    compareButton.disabled = !(hasSelectedData && hasCompletedStatus && isCompareAnalysis);
  }
  
  // Function to show notification banner
  function showNotification(message, type = 'error') {
    // Remove existing notifications
    const existing = document.querySelector('.validation-notification');
    if (existing) existing.remove();
    
    const notificationDiv = document.createElement('div');
    notificationDiv.className = `govuk-notification-banner validation-notification ${type === 'error' ? 'govuk-notification-banner--error' : ''}`;
    notificationDiv.innerHTML = `
      <div class="govuk-notification-banner__header">
        <h2 class="govuk-notification-banner__title">${type === 'error' ? 'Error' : 'Information'}</h2>
      </div>
      <div class="govuk-notification-banner__content">
        <p class="govuk-notification-banner__heading">${message}</p>
      </div>
    `;
    document.querySelector('h1').after(notificationDiv);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      notificationDiv.remove();
    }, 5000);
  }
  
  // Row selection functionality
  function handleRowSelection(row) {
    // Remove selection from previously selected row
    if (selectedRow) {
      selectedRow.classList.remove('selected');
    }
    
    // Select new row
    selectedRow = row;
    selectedRow.classList.add('selected');
    
    // Store selected data in localStorage
    const filenameCell = row.querySelector('.govuk-table__cell:first-child');
    let filename = 'Unknown';
    
    if (filenameCell) {
      // Get text content and clean it
      filename = filenameCell.textContent.trim();
      // If still empty, try getting from innerHTML and strip HTML
      if (!filename) {
        filename = filenameCell.innerHTML.replace(/<[^>]*>/g, '').trim();
      }
    }
    
    console.log('Selected filename:', filename); // Debug: verify filename extraction
    
    const selectedData = {
      filename: filename,
      s3Bucket: row.getAttribute('data-s3-bucket'),
      s3Key: row.getAttribute('data-s3-key'),
      uploadId: row.getAttribute('data-upload-id')
    };
    localStorage.setItem('selectedRowData', JSON.stringify(selectedData));
    
    updateCompareButtonState();
  }
  
  // Compare button functionality
  document.getElementById('compareButton').addEventListener('click', function() {
    const fileInput = document.getElementById('policyPdf');
    const analysisType = document.getElementById('analysisType').value;
    
    // Get selected data from localStorage
    const selectedDataStr = localStorage.getItem('selectedRowData');
    if (!selectedDataStr) {
      showNotification('Please select a completed document from the table to compare with.');
      return;
    }
    
    const selectedData = JSON.parse(selectedDataStr);
    const newFilename = fileInput.files[0]?.name;
    
    if (!newFilename) {
      showNotification('Please select a file to upload.');
      return;
    }
    
    // Store concatenated filename in localStorage for backend to use
    const concatenatedFilename = `${selectedData.filename} vs ${newFilename}`;
    console.log('Concatenated filename:', concatenatedFilename); // Debug: verify concatenation
    localStorage.setItem('concatenatedFilename', concatenatedFilename);
    
    // Add hidden inputs to the form for comparison data
    const form = document.getElementById('uploadForm');
    
    // Remove any existing comparison inputs
    const existingInputs = form.querySelectorAll('input[name^="compare"]');
    existingInputs.forEach(input => input.remove());
    
    // Add comparison data as hidden inputs
    const compareS3BucketInput = document.createElement('input');
    compareS3BucketInput.type = 'hidden';
    compareS3BucketInput.name = 'compareS3Bucket';
    compareS3BucketInput.value = selectedData.s3Bucket;
    form.appendChild(compareS3BucketInput);
    
    const compareS3KeyInput = document.createElement('input');
    compareS3KeyInput.type = 'hidden';
    compareS3KeyInput.name = 'compareS3Key';
    compareS3KeyInput.value = selectedData.s3Key;
    form.appendChild(compareS3KeyInput);
    
    const compareUploadIdInput = document.createElement('input');
    compareUploadIdInput.type = 'hidden';
    compareUploadIdInput.name = 'compareUploadId';
    compareUploadIdInput.value = selectedData.uploadId;
    form.appendChild(compareUploadIdInput);
    
    const selectedFilenameInput = document.createElement('input');
    selectedFilenameInput.type = 'hidden';
    selectedFilenameInput.name = 'selectedFilename';
    selectedFilenameInput.value = selectedData.filename;
    form.appendChild(selectedFilenameInput);
    
    const concatenatedFilenameInput = document.createElement('input');
    concatenatedFilenameInput.type = 'hidden';
    concatenatedFilenameInput.name = 'concatenatedFilename';
    concatenatedFilenameInput.value = concatenatedFilename;
    form.appendChild(concatenatedFilenameInput);
    
    // Add compare flag to form
    const compareFlag = document.createElement('input');
    compareFlag.type = 'hidden';
    compareFlag.name = 'isCompare';
    compareFlag.value = 'true';
    form.appendChild(compareFlag);
    
    // Show loading
    document.getElementById('compareButton').disabled = true;
    document.getElementById('submitButton').disabled = true;
    document.getElementById('loadingMessage').style.display = 'block';
    
    // Submit form to cdp-uploader (same as Summarise)
    form.submit();
  });


  // Initial load
  updateUploadHistory();
  updateCompareButtonState();
  
  // Continuous polling every 3 seconds
  setInterval(() => {
    const hasProcessingUploads = allUploads.some(upload => 
      upload.status === 'processing' || upload.status === 'analysing'
    );
    
    if (hasProcessingUploads) {
      updateUploadHistory();
    }
  }, 3000);
  
  async function updateUploadHistory() {
    try {
      const response = await fetch('/Uploader/status');
      const uploads = await response.json();
      allUploads = uploads.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      renderTable();
    } catch (error) {
      console.error('Failed to update upload history:', error);
    }
  }
  
  function renderTable() {
    const tbody = document.getElementById('uploadHistoryBody');
    if (!tbody) return;
    
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const pageUploads = allUploads.slice(startIndex, endIndex);
    
    tbody.innerHTML = '';
    pageUploads.forEach(upload => {
      const row = document.createElement('tr');
      row.className = 'govuk-table__row selectable-row';
      
      const actionCell = upload.status === 'completed'
        ? `<a href="/status/${upload.requestId}" class="govuk-link">View Results</a>`
        : '<span class="govuk-hint">Processing...</span>';
      
      const timestamp = new Date(upload.timestamp).toLocaleString('en-GB', {
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).replace(',', '');
      
      const analysisTypeDisplay = {
        'red': 'ðŸ”´ Red team',
        'green': 'ðŸ“— Green book',
        'investment': 'ðŸ“Š Investment committee briefing',
        'executive': 'ðŸ’¼ Executive briefing',
        'comparingTwoDocuments': 'ðŸ“„ Compare two documents'
      }[upload.analysisType] || upload.analysisType;
      
      row.innerHTML = `
        <td class="govuk-table__cell">${upload.filename}</td>
        <td class="govuk-table__cell">${analysisTypeDisplay}</td>
        <td class="govuk-table__cell">
          <span class="status-badge status-${upload.status}">${upload.status}</span>
        </td>
        <td class="govuk-table__cell">${timestamp}</td>
        <td class="govuk-table__cell">${actionCell}</td>
      `;
      

      
      // Add s3 data attributes
      row.setAttribute('data-s3-bucket', upload.s3Bucket || '');
      row.setAttribute('data-s3-key', upload.s3Key || '');
      row.setAttribute('data-upload-id', upload.id);
      
      // Add click event for row selection
      row.addEventListener('click', function(e) {
        // Don't select row if clicking on a link
        if (e.target.tagName === 'A') return;
        handleRowSelection(row);
      });
      
      tbody.appendChild(row);
    });
    
    updatePagination();
    
    // Restore selected row if it exists in localStorage
    const selectedDataStr = localStorage.getItem('selectedRowData');
    if (selectedDataStr) {
      const selectedData = JSON.parse(selectedDataStr);
      const rowToSelect = Array.from(tbody.querySelectorAll('.selectable-row')).find(row => {
        return row.getAttribute('data-upload-id') === selectedData.uploadId;
      });
      if (rowToSelect) {
        selectedRow = rowToSelect;
        selectedRow.classList.add('selected');
      }
    }
    
    updateCompareButtonState();
  }
  
  function updatePagination() {
    const totalPages = Math.ceil(allUploads.length / pageSize);
    
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages || totalPages === 0;
    
    const pageNumbers = document.getElementById('pageNumbers');
    pageNumbers.innerHTML = '';
    
    for (let i = 1; i <= totalPages; i++) {
      const li = document.createElement('li');
      li.className = `govuk-pagination__item ${i === currentPage ? 'govuk-pagination__item--current' : ''}`;
      
      const link = document.createElement('button');
      link.className = 'govuk-link govuk-pagination__link';
      link.textContent = i;
      link.addEventListener('click', function() {
        currentPage = i;
        renderTable();
      });
      
      li.appendChild(link);
      pageNumbers.appendChild(li);
    }
  }
});

</script>
{% endif %}

{% endblock %}


