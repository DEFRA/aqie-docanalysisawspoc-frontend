{% extends 'layouts/page.njk' %}
{% from "govuk/components/button/macro.njk" import govukButton %}

{% block pageTitle %}Upload Policy Document{% endblock %}

{% block bodyAttributes %}{% if processingId %} data-processing-id="{{ processingId }}"{% endif %}{% endblock %}

{% block content %}
<h1 class="govuk-heading-m">Upload a Document to Generate AI-Powered Insights</h1>
<form id="uploadForm" action="{{ action }}" method="post" enctype="multipart/form-data" onsubmit="document.getElementById('submitButton').disabled = true; document.getElementById('loadingMessage').style.display = 'block';">
  <div class="govuk-form-group">
    <label class="govuk-label" for="analysisType">
      Prompt analysis type
    </label>
    <select class="govuk-select" id="analysisType" name="analysisType" required style="padding: 8px 12px; border: 2px solid #0b0c0c; border-radius: 4px; font-size: 16px; background: white; min-width: 200px;" oninvalid="this.setCustomValidity('Please select an analysis type')" oninput="this.setCustomValidity('')">
      <option value="">Select analysis type</option>
      <option value="red" {% if analysisType == 'red' %}selected{% endif %}>ðŸ”´ Red team</option>
      <option value="green" {% if analysisType == 'green' %}selected{% endif %}>ðŸ“— Green book</option>
      <option value="investment" {% if analysisType == 'investment' %}selected{% endif %}>ðŸ“Š Investment committee briefing</option>
      <option value="executive" {% if analysisType == 'executive' %}selected{% endif %}>ðŸ’¼ Executive briefing</option>
    </select>
  </div>
  <div class="govuk-form-group">
    <label class="govuk-label" for="policyPdf">Select PDF file</label>
    <div class="file-selection-area">
      <input class="govuk-file-upload" id="policyPdf" name="policyPdf" type="file" accept="application/pdf" required>
      <div id="fileSpinner" class="spinner" style="display: none;"></div>
    </div>
  </div>
  {{ govukButton({ text: "Summarise", attributes: { type: "submit", id: "submitButton" } }) }}
  {{ govukButton({ text: "Compare", classes: "govuk-button--secondary", attributes: { type: "button", id: "compareButton" } }) }}
  <div id="loadingMessage" class="govuk-inset-text" style="display: none;">
    <div class="spinner" style="display: inline-block; margin-right: 10px;"></div>
    Processing PDF... Please wait...
  </div>
</form>
<div id="fileInfo" style="margin-top:1em; display:none;">
  <strong>Selected file:</strong> <span id="fileName"></span>
</div>

<!-- Upload History Table -->
{% if uploads and uploads.length > 0 %}
<div class="govuk-form-group" style="margin-top: 2em;">
  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em;">
    <h2 class="govuk-heading-m" style="margin: 0;">Upload History</h2>
    <div>
      <label for="pageSize" class="govuk-label" style="margin-right: 0.5em;">Show:</label>
      <select id="pageSize" class="govuk-select" style="width: auto;">
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
    </div>
  </div>
  <table class="govuk-table" id="uploadHistoryTable">
    <thead class="govuk-table__head">
      <tr class="govuk-table__row">
        <th class="govuk-table__header">Filename</th>
        <th class="govuk-table__header">Analysis type</th>
        <th class="govuk-table__header">Status</th>
        <th class="govuk-table__header">Timestamp</th>
        <th class="govuk-table__header">Action</th>
        <th class="govuk-table__header" style="text-align: center; width: 60px;">Select</th>
      </tr>
    </thead>
    <tbody class="govuk-table__body" id="uploadHistoryBody">
      {% for upload in uploads %}
      <tr class="govuk-table__row" data-s3-bucket="{{ upload.s3Bucket }}" data-s3-key="{{ upload.s3Key }}">
        <td class="govuk-table__cell">{{ upload.filename }}</td>
        <td class="govuk-table__cell">{{ upload.analysisType }}</td>
        <td class="govuk-table__cell">
          <span class="status-badge status-{{ upload.status }}">{{ upload.status }}</span>
        </td>
        <td class="govuk-table__cell">
          <script>document.write(new Date('{{ upload.timestamp }}').toLocaleString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'}).replace(',', ''));</script>
        </td>
        <td class="govuk-table__cell">
          {% if upload.status == 'completed' %}
          <a href="/status/{{ upload.requestId }}" target="_blank" class="govuk-link">View Results</a>
          {% else %}
          <span class="govuk-hint">Processing...</span>
          {% endif %}
        </td>
        <td class="govuk-table__cell" style="text-align: center;">
          <input type="radio" name="selectedUpload" value="{{ upload.id }}" class="govuk-radios__input">
        </td>
        <input type="hidden" name="s3Bucket_{{ upload.id }}" value="{{ upload.s3Bucket }}">
        <input type="hidden" name="s3Key_{{ upload.id }}" value="{{ upload.s3Key }}">
      </tr>
      {% endfor %}
    </tbody>
  </table>
  
  <div id="pagination" class="govuk-pagination" style="margin-top: 1em;">
    <div class="govuk-pagination__prev">
      <button id="prevBtn" class="govuk-link govuk-pagination__link" disabled><<</button>
    </div>
    <ul class="govuk-pagination__list" id="pageNumbers"></ul>
    <div class="govuk-pagination__next">
      <button id="nextBtn" class="govuk-link govuk-pagination__link">>></button>
    </div>
  </div>
</div>

<style>
.govuk-table__cell {
  font-size: 14px;
  vertical-align: middle;
  padding: 8px 12px;
}
.status-badge {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: bold;
  display: inline-block;
}
.status-analysing { background: #ff9800; color: white; animation: pulse 2s infinite;}
.status-processing { background: #2196f3; color: white; animation: pulse 2s infinite; }
.status-completed { background: #00703c; color: white; }
.status-failed { background: #f44336; color: white; }
.status-uploading { background: #9c27b0; color: white; animation: pulse 1.5s infinite; }
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}
.govuk-table__header {
  font-size: 14px;
  font-weight: 600;
}
.govuk-hint {
  font-size: 14px;
  color: #626a6e;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let allUploads = [];
  let currentPage = 1;
  let pageSize = 10;
  
  // Check if redirected from complete action and show success message
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('uploaded') === 'true') {
    // Remove the parameter from URL without page reload
    window.history.replaceState({}, document.title, window.location.pathname);
    
    // Show success message
    const successDiv = document.createElement('div');
    successDiv.className = 'govuk-notification-banner govuk-notification-banner--success';
    successDiv.innerHTML = `
      <div class="govuk-notification-banner__header">
        <h2 class="govuk-notification-banner__title">Success</h2>
      </div>
      <div class="govuk-notification-banner__content">
        <p class="govuk-notification-banner__heading">File uploaded successfully. Analysis in progress.</p>
      </div>
    `;
    document.querySelector('h1').after(successDiv);
    
    // Immediately update upload history to show new upload
    updateUploadHistory();
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      successDiv.remove();
    }, 5000);
  }
  
  const pageSizeSelect = document.getElementById('pageSize');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  pageSizeSelect.addEventListener('change', function() {
    pageSize = parseInt(this.value);
    currentPage = 1;
    renderTable();
  });
  
  prevBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      currentPage--;
      renderTable();
    }
  });
  
  nextBtn.addEventListener('click', function() {
    const totalPages = Math.ceil(allUploads.length / pageSize);
    if (currentPage < totalPages) {
      currentPage++;
      renderTable();
    }
  });

  // Compare button functionality
  document.getElementById('compareButton').addEventListener('click', function() {
    const selectedRadio = document.querySelector('input[name="selectedUpload"]:checked');
    const fileInput = document.getElementById('policyPdf');
    const analysisType = document.getElementById('analysisType').value;
    
    if (!selectedRadio) {
      alert('Please select a document from the table to compare with.');
      return;
    }
    
    if (!fileInput.files[0]) {
      alert('Please select a PDF file to upload for comparison.');
      return;
    }
    
    if (!analysisType) {
      alert('Please select an analysis type.');
      return;
    }
    
    // Get s3 data from selected row
    const selectedRow = selectedRadio.closest('tr');
    const s3Bucket = selectedRow.getAttribute('data-s3-bucket');
    const s3Key = selectedRow.getAttribute('data-s3-key');
    
    if (!s3Bucket || !s3Key) {
      alert('Selected document missing S3 information.');
      return;
    }
    
    // Create form data for comparison
    const formData = new FormData();
    formData.append('policyPdf', fileInput.files[0]);
    formData.append('analysisType', analysisType);
    formData.append('compareS3Bucket', s3Bucket);
    formData.append('compareS3Key', s3Key);
    formData.append('compareUploadId', selectedRadio.value);
    
    // Show loading
    document.getElementById('compareButton').disabled = true;
    document.getElementById('loadingMessage').style.display = 'block';
    
    // Submit to compare endpoint
    fetch('/Uploader/compare', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Refresh upload history
        updateUploadHistory();
        // Clear form
        fileInput.value = '';
        document.getElementById('fileInfo').style.display = 'none';
      } else {
        alert('Comparison failed: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Comparison error:', error);
      alert('Comparison failed: ' + error.message);
    })
    .finally(() => {
      document.getElementById('compareButton').disabled = false;
      document.getElementById('loadingMessage').style.display = 'none';
    });
  });


  // Initial load
  updateUploadHistory();
  
  // More frequent updates for real-time status
  setInterval(updateUploadHistory, 3000);
  
  async function updateUploadHistory() {
    try {
      const response = await fetch('/Uploader/status');
      const uploads = await response.json();
      allUploads = uploads.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      renderTable();
    } catch (error) {
      console.error('Failed to update upload history:', error);
    }
  }
  
  function renderTable() {
    const tbody = document.getElementById('uploadHistoryBody');
    if (!tbody) return;
    
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const pageUploads = allUploads.slice(startIndex, endIndex);
    
    tbody.innerHTML = '';
    pageUploads.forEach(upload => {
      const row = document.createElement('tr');
      row.className = 'govuk-table__row';
      
      const actionCell = upload.status === 'completed'
        ? `<a href="/status/${upload.requestId}" target="_blank" class="govuk-link">View Results</a>`
        : '<span class="govuk-hint">Processing...</span>';
      
      const timestamp = new Date(upload.timestamp).toLocaleString('en-GB', {
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).replace(',', '');
      
      const analysisTypeDisplay = {
        'red': 'ðŸ”´ Red team',
        'green': 'ðŸ“— Green book',
        'investment': 'ðŸ“Š Investment committee briefing',
        'executive': 'ðŸ’¼ Executive briefing'
      }[upload.analysisType] || upload.analysisType;
      
      row.innerHTML = `
        <td class="govuk-table__cell">${upload.filename}</td>
        <td class="govuk-table__cell">${analysisTypeDisplay}</td>
        <td class="govuk-table__cell">
          <span class="status-badge status-${upload.status}">${upload.status}</span>
        </td>
        <td class="govuk-table__cell">${timestamp}</td>
        <td class="govuk-table__cell">${actionCell}</td>
        <td class="govuk-table__cell" style="text-align: center;">
          <input type="radio" name="selectedUpload" value="${upload.id}" class="govuk-radios__input">
        </td>
        <input type="hidden" name="s3Bucket_${upload.id}" value="${upload.s3Bucket || ''}">
        <input type="hidden" name="s3Key_${upload.id}" value="${upload.s3Key || ''}">
      `;
      
      // Add s3 data attributes
      row.setAttribute('data-s3-bucket', upload.s3Bucket || '');
      row.setAttribute('data-s3-key', upload.s3Key || '');
      tbody.appendChild(row);
    });
    
    updatePagination();
  }
  
  function updatePagination() {
    const totalPages = Math.ceil(allUploads.length / pageSize);
    
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages || totalPages === 0;
    
    const pageNumbers = document.getElementById('pageNumbers');
    pageNumbers.innerHTML = '';
    
    for (let i = 1; i <= totalPages; i++) {
      const li = document.createElement('li');
      li.className = `govuk-pagination__item ${i === currentPage ? 'govuk-pagination__item--current' : ''}`;
      
      const link = document.createElement('button');
      link.className = 'govuk-link govuk-pagination__link';
      link.textContent = i;
      link.addEventListener('click', function() {
        currentPage = i;
        renderTable();
      });
      
      li.appendChild(link);
      pageNumbers.appendChild(li);
    }
  }
});

</script>
{% endif %}

{% endblock %}


